import React, { useState, useEffect } from "react";

import Head from "next/head";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Rules from "@/components/Rules";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const initResults = (size = blocks.length) => {
    return Array.from({ length: size - 1 }, () =>
      Array.from({ length: size }, () => -1)
    );
  };

  const [rule, setRule] = useState(34);
  const [blocks, setBlocks] = useState([0, 0, 0, 1, 0]);
  const [results, setResults] = useState(initResults());

  const addBlock = () => {
    if (blocks.length > 10) return;

    setBlocks([...blocks, 0]);
    setResults(initResults(blocks.length + 1));
  };

  const minusBlock = () => {
    if (blocks.length === 1) return;

    setBlocks(blocks.slice(0, -1));
    setResults(initResults(blocks.length - 1));
  };

  const getPrevBlockRule = (currBlock: number, prevRow: number[]) => {
    return [-1, 0, 1]
      .map((n) => prevRow.at(currBlock + n) ?? prevRow.at(0))
      .join("");
  };

  const learnValue = (
    currBlock: number,
    currRowIndex: number,
    currRow: number[]
  ) => {
    const prevRule = getPrevBlockRule(
      currBlock,
      currRowIndex === 0 ? blocks : currRow
    );
    const binRule = rule.toString(2).padStart(8, "0");
    const blockDec = parseInt(prevRule, 2);

    return parseInt(binRule.charAt(7 - blockDec));
  };

  const handleStart = () => {
    let arr: number[] = [];
    let newArr = [...results];
    results.forEach((row, idx) => {
      arr = [];
      row.forEach((block, bidx) => {
        arr = [...arr, learnValue(bidx, idx, newArr[idx - 1])];
      });
      newArr[idx] = arr;
    });
    setResults(newArr);
  };

  const KEY_COLOR: any = {
    "-1": "#ccc",
    "0": "white",
    "1": "black",
  };
  return (
    <>
      <Head>
        <title>CMPLXSY | Cellular Automata</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto items-center py-16">
        <div className="border-[0.2rem] border-solid border-yellow-500 bg-transparent p-4 flex items-center space-x-4">
          <div className="my-2">
            <label className="mr-2" htmlFor="size">
              Size:
            </label>
            <input
              type="number"
              title="size"
              name="size"
              value={blocks.length}
              className="px-2"
              disabled
            />
          </div>
          <div className="my-2">
            <label className="mr-2" htmlFor="rule">
              CA Rule:
            </label>
            <input
              className="px-2"
              type="number"
              name="rule"
              title="rule"
              value={rule}
              onChange={(e) => setRule(parseInt(e.target.value))}
              min={0}
              max={255}
            />
          </div>
        </div>
        <div className="bg-white p-3">
          <Rules currRule={rule} />
        </div>

        <div className="flex align-center justify-center my-4">
          <button
            type="button"
            className="w-8 h-8 bg-red-500 rounded-full mx-4 text-center"
            onClick={(e) => {
              minusBlock();
            }}
          >
            -
          </button>
          <button
            type="button"
            className="w-8 h-8 bg-green-500 rounded-full mx-4 text-center"
            onClick={(e) => {
              addBlock();
            }}
          >
            +
          </button>
        </div>

        <div className="flex align-center justify-center mt-4 w-full">
          {blocks.map((item, idx) => {
            return (
              <div
                key={idx}
                className="w-12 h-12 border-yellow-300 border-[2px] border-solid"
                style={{
                  backgroundColor: item === 0 ? "white" : "black",
                }}
                onClick={(e) => {
                  let temp = [...blocks];
                  temp[idx] = item === 0 ? 1 : 0;
                  setBlocks(temp);
                }}
              ></div>
            );
          })}
        </div>
        <div className="flex flex-col align-center justify-center w-full">
          {results.map((row, idx) => {
            return (
              <div
                key={idx}
                className="flex align-center justify-center w-full"
              >
                {row.map((block, bidx) => {
                  return (
                    <div
                      key={bidx}
                      className="w-12 h-12 border-yellow-300 border-[2px] border-solid"
                      style={{
                        backgroundColor: KEY_COLOR[block],
                      }}
                    ></div>
                  );
                })}
              </div>
            );
          })}
        </div>
        <div className="flex justify-center mt-5 gap-3">
          <button
            className="bg-white text-black px-4 py-2"
            onClick={handleStart}
          >
            Start
          </button>
          <button
            className="bg-white text-black px-4 py-2"
            onClick={() => setResults(initResults())}
          >
            Reset
          </button>
        </div>
      </main>
    </>
  );
}
